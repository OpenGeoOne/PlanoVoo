# -*- coding: utf-8 -*-

"""
/***************************************************************************
 PlanoVoo - Funções
                                 A QGIS plugin
 PlanoVoo
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-12-02
        copyright            : (C) 2024 by Prof Cazaroli e Leandro França
        email                : contato@geoone.com.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Prof Cazaroli e Leandro França'
__date__ = '2024-12-02'
__copyright__ = '(C) 2024 by Prof Cazaroli e Leandro França'
__revision__ = '$Format:%H$'

from qgis.core import (
   QgsCoordinateReferenceSystem,
   QgsCoordinateTransform, QgsPointXY,
   QgsRasterLayer, QgsProcessingFeedback)
import processing

def obter_DEM(geometria, crs, apikey, feedback=None, bbox_area_min=2.5):
   # Determinar o bounding box da linha em WGS 84
    bounds = linha_base_geom.boundingBox()
    ponto_min = transformador.transform(QgsPointXY(bounds.xMinimum(), bounds.yMinimum()))
    ponto_max = transformador.transform(QgsPointXY(bounds.xMaximum(), bounds.yMaximum()))

    pontoN = ponto_max.y()
    pontoS = ponto_min.y()
    pontoW = ponto_min.x()
    pontoE = ponto_max.x()

    # Certificar que a área do bounding box seja grande o suficiente
    bbox_area = (pontoE - pontoW) * (pontoN - pontoS) * 111 * 111  # Aproximação em km²
    if bbox_area < bbox_area_min:
        aumento = ((bbox_area_min / bbox_area) ** 0.5 - 1) / 2
        ajuste_lat_extra = aumento * (pontoN - pontoS)
        ajuste_long_extra = aumento * (pontoE - pontoW)
        pontoN += ajuste_lat_extra
        pontoS -= ajuste_lat_extra
        pontoW -= ajuste_long_extra
        pontoE += ajuste_long_extra

    # Obter o DEM da área
    coordenadas = f'{pontoW},{pontoE},{pontoS},{pontoN}'
    area = f"{coordenadas}[EPSG:4326]"

    result = processing.run(
        "OTDEMDownloader:OpenTopography DEM Downloader", {
            'DEMs': 7,  # Copernicus Global DSM 30m
            'Extent': area,
            'API_key': apikey,
            'OUTPUT': 'TEMPORARY_OUTPUT'
        })

    output_path = result['OUTPUT']
    camadaMDE = QgsRasterLayer(output_path, "DEM")

    # Filtrar o MDE com (Relevo / Filtro do MDE) do LFTools
    result = processing.run(
        "lftools:demfilter", {
            'INPUT': camadaMDE,
            'KERNEL': 0,
            'OUTPUT': 'TEMPORARY_OUTPUT',
            'OPEN': False
        })
    output_path = result['OUTPUT']
    camadaMDE = QgsRasterLayer(output_path, "DEM")

    feedback.pushInfo("DEM processado com sucesso!")
    
    return camadaMDE