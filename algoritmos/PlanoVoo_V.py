# -*- coding: utf-8 -*-

"""
/***************************************************************************
 PlanoVoo
                                 A QGIS plugin
 PlanoVoo
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-12-02
        copyright            : (C) 2024 by Prof Cazaroli e Leandro França
        email                : contato@geoone.com.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Prof Cazaroli e Leandro França'
__date__ = '2024-11-05'
__copyright__ = '(C) 2024 by Prof Cazaroli e Leandro França'
__revision__ = '$Format:%H$'

from qgis.core import QgsProcessing, QgsProject, QgsProcessingAlgorithm, QgsWkbTypes, QgsVectorFileWriter
from qgis.core import QgsProcessingParameterVectorLayer, QgsProcessingParameterNumber, QgsProcessingParameterString
from qgis.core import QgsTextFormat, QgsTextBufferSettings, QgsProcessingParameterFileDestination, QgsCoordinateReferenceSystem
from qgis.core import QgsPalLayerSettings, QgsVectorLayerSimpleLabeling, QgsProcessingParameterBoolean, QgsCoordinateTransform
from qgis.core import QgsVectorLayer, QgsRasterLayer, QgsPoint, QgsPointXY, QgsField, QgsFields, QgsFeature, QgsGeometry
from qgis.core import QgsMarkerSymbol, QgsSingleSymbolRenderer, QgsSimpleLineSymbolLayer, QgsLineSymbol, QgsMarkerLineSymbolLayer
from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtGui import QColor, QFont, QIcon
from PyQt5.QtCore import QVariant
from qgis.PyQt.QtWidgets import QAction, QMessageBox
import processing
import os
import math
import csv

# pontos_provider Air 2S (5472 × 3648)

class PlanoVoo_V(QgsProcessingAlgorithm):
    def initAlgorithm(self, config=None):
        self.addParameter(QgsProcessingParameterVectorLayer('linha_base','Linha Base de Voo', types=[QgsProcessing.TypeVectorLine]))
        self.addParameter(QgsProcessingParameterNumber('altura','Altura do Objeto (m)',
                                                       type=QgsProcessingParameterNumber.Double, minValue=2,defaultValue=15))
        self.addParameter(QgsProcessingParameterNumber('alturaMin','Altura Inicial (m)',
                                                       type=QgsProcessingParameterNumber.Double, minValue=2,defaultValue=2))
        self.addParameter(QgsProcessingParameterNumber('deltaHorizontal','Espaçamento Horizontal (m)',
                                                       type=QgsProcessingParameterNumber.Double, minValue=2,defaultValue=10))
        self.addParameter(QgsProcessingParameterNumber('deltaVertical','Espaçamento Vertical (m)',
                                                       type=QgsProcessingParameterNumber.Double, minValue=2,defaultValue=5)) 
        self.addParameter(QgsProcessingParameterString('api_key', 'Chave API - OpenTopography',defaultValue='d0fd2bf40aa8a6225e8cb6a4a1a5faf7'))
        self.addParameter(QgsProcessingParameterFileDestination('saida_csv', 'Arquivo de Saída CSV para o Litchi',
                                                               fileFilter='CSV files (*.csv)'))
        self.addParameter(QgsProcessingParameterFileDestination('saida_kml', 'Arquivo de Saída KML para o Google Earth',
                                                               fileFilter='KML files (*.kml)'))
        
    def processAlgorithm(self, parameters, context, feedback):
        teste = True # Quando True mostra camadas intermediárias
        
        # =====Parâmetros de entrada para variáveis========================
        linha_base = self.parameterAsVectorLayer(parameters, 'linha_base', context)
        crs = linha_base.crs()

        H = parameters['altura']
        h = parameters['alturaMin']
        deltaH = parameters['deltaHorizontal']
        deltaV = parameters['deltaVertical']
        
        apikey = parameters['api_key'] # 'd0fd2bf40aa8a6225e8cb6a4a1a5faf7' # Open Topgragraphy DEM Downloader
        
        caminho_kml = parameters['saida_kml']
        caminho_csv = parameters['saida_csv']
        
        feedback.pushInfo(f"Altura: {H}, Delta Horizontal: {deltaH}, Delta Vertical: {deltaV}")
        
        # =====================================================================
        # ===== Determinação das Linhas de Voo ================================
        
        # Verificar se a linha_base contém apenas uma feature
        linha = list(linha_base.getFeatures())
        if len(linha) != 1:
            raise ValueError("A camada Linha Base deve conter somente uma linha.")
        
        # Criar linhas Paralelas à linha base
        paralelas_layer = QgsVectorLayer('LineString?crs=' + crs.authid(), 'Linhas Paralelas', 'memory')
        paralelas_provider = paralelas_layer.dataProvider()
        paralelas_provider.addAttributes([QgsField('id', QVariant.Int)])
        paralelas_provider.addAttributes([QgsField('altura', QVariant.Int)])
        paralelas_layer.updateFields()
        
        # Incluir a linha_base como a primeira linha paralela
        linha = self.parameterAsVectorLayer(parameters, 'linha_base', context).getFeature(0)
        primeira_linha = linha.geometry()       
        linha_id = 1
        paralela = QgsFeature()
        paralela.setGeometry(primeira_linha)
        paralela.setAttributes([linha_id])
        paralela.setAttributes([h])
        paralelas_provider.addFeature(paralela)
        
        deslocamento = h + deltaH 
        # Criar linhas paralelas até atingir a altura H
        while abs(deslocamento) <= H + 3:
            linha_id += 1

            # Deslocamento da linha base para criar a paralela
            parameters = {
                'INPUT': linha_base,  # Linha base
                'DISTANCE': deslocamento,
                'OUTPUT': 'memory:'
            }

            result = processing.run("native:offsetline", parameters)
            linha_paralela_layer = result['OUTPUT']
            
            # Obter a geometria da linha paralela
            feature = next(linha_paralela_layer.getFeatures(), None)
            linha_geom = feature.geometry() if feature else None

            # Adicionar a paralela à camada
            paralela = QgsFeature()
            paralela.setGeometry(linha_geom)
            paralela.setAttributes([linha_id])
            paralelas_provider.addFeature(paralela)
            paralelas_layer.updateExtents()

            # Atualizar a linha base para a próxima paralela
            #linha_base = linha_paralela_layer

            deslocamento += deltaH
              
        if teste == True:
            QgsProject.instance().addMapLayer(paralelas_layer)
        """
        # Criar a camada com a união das linhas paralelas
        linhas_layer = QgsVectorLayer('LineString?crs=' + crs.authid(), 'Linhas', 'memory')
        linhas_provider = linhas_layer.dataProvider()
        linhas_provider.addAttributes([QgsField('id', QVariant.Int)])
        linhas_layer.updateFields()
        
        paralelas_features = list(paralelas_layer.getFeatures())
        linha_id = 1
        
        for i in range(len(paralelas_features)):
            # Adicionar a linha paralela à camada
            linha_paralela = paralelas_features[i]
            linha_paralela.setAttributes([linha_id])
            linhas_provider.addFeature(linha_paralela)
            linha_id += 1

            # Criar a linha de costura
            if i < len(paralelas_features) - 1:
                geom_atual = paralelas_features[i].geometry()
                geom_seguinte = paralelas_features[i + 1].geometry()

                # Obter os extremos das linhas (direita ou esquerda alternando)
                extremos_atual = list(geom_atual.vertices())
                extremos_seguinte = list(geom_seguinte.vertices())

                if i % 2 == 0:  # Conecta pelo lado direito
                    ponto_inicio = QgsPointXY(extremos_atual[-1])  # Extremo final da linha atual
                    ponto_fim = QgsPointXY(extremos_seguinte[-1])  # Extremo final da próxima linha
                else:  # Conecta pelo lado esquerdo
                    ponto_inicio = QgsPointXY(extremos_atual[0])  # Extremo inicial da linha atual
                    ponto_fim = QgsPointXY(extremos_seguinte[0])  # Extremo inicial da próxima linha
                
                # Criar a geometria da linha de costura
                conexao_geom = QgsGeometry.fromPolylineXY([ponto_inicio, ponto_fim])
                conexao_feature = QgsFeature()
                conexao_feature.setGeometry(conexao_geom)
                conexao_feature.setAttributes([linha_id])
                linhas_provider.addFeature(conexao_feature)

                linha_id += 1

        # Atualizar extensão da camada de resultado
        linhas_layer.updateExtents()
      
        # Verificar se as linhas estão contínuas
        linhas = sorted(linhas_layer.getFeatures(), key=lambda f: f['id'])
        
        for i in range(len(linhas) - 1):
            geom_atual = linhas[i].geometry()
            geom_seguinte = linhas[i + 1].geometry()
        
            # Obter os extremos das linhas (direita ou esquerda alternando)
            extremos_atual = list(geom_atual.vertices())
            extremos_seguinte = list(geom_seguinte.vertices())
        
            ponto_final_atual = QgsPointXY(extremos_atual[-1].x(), extremos_atual[-1].y())  # Extremo final da linha atual
            ponto_inicial_seguinte = QgsPointXY(extremos_seguinte[0].x(), extremos_seguinte[0].y())  # Extremo inicial da próxima linha

            if ponto_final_atual != ponto_inicial_seguinte: # se for igual continua para a próxima linha
                extremos_seguinte = [QgsPointXY(p.x(), p.y()) for p in reversed(extremos_seguinte)] # Invertemos os vértices da linha seguinte
                geom_seguinte = QgsGeometry.fromPolylineXY(extremos_seguinte)

                # Atualizar imediatamente a geometria da linha na camada
                linhas_layer.dataProvider().changeGeometryValues({linhas[i + 1].id(): geom_seguinte})

                # Atualizar a linha seguinte na lista local para manter consistência no loop
                linhas[i + 1].setGeometry(geom_seguinte)
        
        # Atualizar a extensão da camada
        linhas_layer.updateExtents()

        if teste == True:
            QgsProject.instance().addMapLayer(linhas_layer)
        
        # Criação de uma linha única para Linha de Voo
        linha_voo_layer = QgsVectorLayer('LineString?crs=' + crs.authid(), 'Linha de Voo', 'memory')
        linha_voo_provider = linha_voo_layer.dataProvider()
        linha_voo_provider.addAttributes([QgsField('id', QVariant.Int)])
        linha_voo_layer.updateFields()

        # Obter e ordenar as feições pela ordem dos IDs para garantir
        linhas = sorted(linhas_layer.getFeatures(), key=lambda f: f['id'])

        # Iniciar a lista de coordenadas para a linha única
        linha_unica_coords = []

        # Adicionar coordenadas de todas as linhas em ordem
        for f in linhas:
            geom = f.geometry()
            if geom.isMultipart():
                partes = geom.asMultiPolyline()
                for parte in partes:
                    linha_unica_coords.extend(parte)  # Adicionar todas as partes
            else:
                linha_unica_coords.extend(geom.asPolyline())  # Adicionar a linha simples
            
        # Criar a geometria combinada a partir das coordenadas coletadas
        linha_unica_geom = QgsGeometry.fromPolylineXY(linha_unica_coords)

        # Criar a feature para a linha única
        linha_unica_feature = QgsFeature()
        linha_unica_feature.setGeometry(linha_unica_geom)
        linha_unica_feature.setAttributes([1])  # Atributo ID = 1

        # Adicionar a feature à camada de linha de voo
        linha_voo_provider.addFeature(linha_unica_feature)

        # Atualizar extensão da camada de resultado
        linha_voo_layer.updateExtents()
        
        # Configurar simbologia de seta
        line_symbol = QgsLineSymbol.createSimple({'color': 'blue', 'width': '0.3'})  # Linha base

        seta = QgsMarkerSymbol.createSimple({'name': 'arrow', 'size': '5', 'color': 'blue', 'angle': '90'})

        marcador = QgsMarkerLineSymbolLayer()
        marcador.setInterval(30)  # Define o intervalo entre as setas (marcadores)
        marcador.setSubSymbol(seta)
        linha_voo_layer.renderer().symbol().appendSymbolLayer(marcador)
        
        QgsProject.instance().addMapLayer(linha_voo_layer)
        
        # =====================================================================
        # =====Criar a camada Pontos de Fotos==================================
        
        # Criar uma camada Ponto com os deltaFront sobre a linha
        pontos_fotos = QgsVectorLayer('Point?crs=' + crs.authid(), 'Pontos Fotos', 'memory')
        pontos_provider = pontos_fotos.dataProvider()

        # Definir campos
        campos = QgsFields()
        campos.append(QgsField("id", QVariant.Int))
        campos.append(QgsField("latitude", QVariant.Double))
        campos.append(QgsField("longitude", QVariant.Double))
        pontos_provider.addAttributes(campos)
        pontos_fotos.updateFields()

        linha_voo = next(linha_voo_layer.getFeatures())  # Pegando a única linha
        geom_linha = linha_voo.geometry() # Obter a geometria da linha

        # Obter a geometria do polígono a partir da camada
        poligono_feature = next(camada.getFeatures())  # Assumindo que a camada contém apenas um polígono
        poligono_geom = poligono_feature.geometry()  # Geometria do polígono

        # Criar um buffer com tolerância de 3 metros
        tolerancia = 3  # Margem de 3 metros
        poligono_com_tolerancia = poligono_geom.buffer(tolerancia, 5)  # Buffer com 5 segmentos por quadrante

        # Obter o ponto inicial da linha
        ponto_inicial = QgsPointXY(geom_linha.vertexAt(0))

        # Gerar pontos
        pontoID = 1
        distVoo = geom_linha.length()
        distAtual = 0
        
        # Primeiro Ponto no início da primeira linha da Linha de Voo
        ponto_feature = QgsFeature()
        ponto_feature.setFields(campos)
        ponto_feature.setAttribute("id", pontoID)
        ponto_feature.setAttribute("latitude", ponto_inicial.y())
        ponto_feature.setAttribute("longitude", ponto_inicial.x())
        ponto_feature.setGeometry(QgsGeometry.fromPointXY(ponto_inicial))
        pontos_provider.addFeature(ponto_feature)
        
        pontoID += 1

        while True:
            distAtual += deltaFront
            
            if distAtual > (distVoo):  # Evitar extrapolação além do comprimento da linha
                feedback.pushInfo(f"Dist. Atual: {distAtual}, Dist. Voo: {distVoo}")
                break
            
            ponto = geom_linha.interpolate(distAtual).asPoint()
            ponto_geom = QgsGeometry.fromPointXY(QgsPointXY(ponto))
            
            # Adicionar ponto somente se estiver dentro do polígono
            if poligono_com_tolerancia.contains(ponto_geom):
                ponto_feature = QgsFeature()
                ponto_feature.setFields(campos)
                ponto_feature.setAttribute("id", pontoID)
                ponto_feature.setAttribute("latitude", ponto.y())
                ponto_feature.setAttribute("longitude", ponto.x())
                ponto_feature.setGeometry(ponto_geom)
                pontos_provider.addFeature(ponto_feature)
                
                pontoID += 1

        # Atualizar a camada
        pontos_fotos.updateExtents()

        # Simbologia
        simbolo = QgsMarkerSymbol.createSimple({'color': 'blue', 'size': '3'})
        renderer = QgsSingleSymbolRenderer(simbolo)
        pontos_fotos.setRenderer(renderer)

        # Rótulos
        settings = QgsPalLayerSettings()
        settings.fieldName = "id"
        settings.isExpression = True
        settings.enabled = True

        textoF = QgsTextFormat()
        textoF.setFont(QFont("Arial", 10, QFont.Bold))
        textoF.setSize(10)

        bufferS = QgsTextBufferSettings()
        bufferS.setEnabled(True)
        bufferS.setSize(1)  # Tamanho do buffer em milímetros
        bufferS.setColor(QColor("white"))  # Cor do buffer

        textoF.setBuffer(bufferS)
        settings.setFormat(textoF)

        pontos_fotos.setLabelsEnabled(True)
        pontos_fotos.setLabeling(QgsVectorLayerSimpleLabeling(settings))

        pontos_fotos.triggerRepaint()
        #QgsProject.instance().addMapLayer(pontos_fotos)
        
        # ==================================================================================
        # =====Obter a altitude dos pontos das Fotos========================================
        
        # OpenTopography
        
        feedback.pushInfo("Obtendo as Altitudes com o OpenTopography")
        
        # Obter as coordenadas extremas da área (em WGS 84)
        pontoN = float('-inf')  # coordenada máxima (Norte) / inf de inifito
        pontoS = float('inf')   # coordenada mínima (Sul)
        pontoW = float('inf')   # coordenada mínima (Oeste)
        pontoE = float('-inf')  # coordenada máxima (Leste)
        
        # Reprojetar Pontos (Fotos) de UTM para 4326; nesse caso EPSG:31983
        crs_wgs = QgsCoordinateReferenceSystem(4326) # WGS84 que OpenTopography usa
        
        # Transformador de coordenadas (UTM -> WGS84)
        transformador = QgsCoordinateTransform(crs, crs_wgs, QgsProject.instance())
        
        for feature in camada.getFeatures():  # Terreno
            geom = feature.geometry()
            bounds = geom.boundingBox()  # Limites da geometria em UTM

            # Transformar limites para WGS 84
            ponto_min = transformador.transform(QgsPointXY(bounds.xMinimum(), bounds.yMinimum()))
            ponto_max = transformador.transform(QgsPointXY(bounds.xMaximum(), bounds.yMaximum()))

            pontoN = max(pontoN, ponto_max.y())
            pontoS = min(pontoS, ponto_min.y())
            pontoW = min(pontoW, ponto_min.x())
            pontoE = max(pontoE, ponto_max.x())

        # Ajustar os limites
        ajuste_lat = (pontoN - pontoS) * 0.70
        ajuste_long = (pontoE - pontoW) * 0.70

        pontoN += ajuste_lat
        pontoS -= ajuste_lat
        pontoW -= ajuste_long
        pontoE += ajuste_long    

        # Obter o MDE da área
        coordenadas = f'{pontoW},{pontoE},{pontoS},{pontoN}'
        area = f"{coordenadas}[EPSG:4326]"

        result = processing.run(
                "OTDEMDownloader:OpenTopography DEM Downloader", {
                    'DEMs': 7, # 7: Copernicus Global DSM 30m
                    'Extent': area,
                    'API_key': apikey,
                    'OUTPUT': 'TEMPORARY_OUTPUT'})

        output_path = result['OUTPUT']
        camadaMDE = QgsRasterLayer(output_path, "DEM")
    
        # Valor da Altitude
        prov = pontos_fotos.dataProvider()
        pontos_fotos.startEditing()
        
        # Adicionar um campo para altitude, se não existir
        if 'alturaVoo' not in [field.name() for field in prov.fields()]:
            prov.addAttributes([QgsField('alturaVoo', QVariant.Double)])
            pontos_fotos.updateFields()

         # definir o valor de Z
        for f in pontos_fotos.getFeatures():
            point = f.geometry().asPoint()
            
            # Transformar coordenada para CRS do raster
            point_wgs = transformador.transform(QgsPointXY(point.x(), point.y()))
            
            # Obter o valor de Z do MDE
            value, result = camadaMDE.dataProvider().sample(point_wgs, 1)  # Resolução = 1
            if result:
                f['alturaVoo'] = value + H  # altura de Voo
                pontos_fotos.updateFeature(f)

        pontos_fotos.commitChanges()

        QgsProject.instance().addMapLayer(pontos_fotos)
        
        feedback.pushInfo("")
        feedback.pushInfo("Linha de Voo e Pontos para Fotos concluídos com sucesso!")
        
        #pontos_fotos = QgsProject.instance().mapLayersByName("Pontos Fotos")[0]
        
        # =========Exportar para o Google Earth Pro (kml)================================================
        # Reprojetar camada Pontos Fotos de UTM para WGS84 (4326)  
        pontos_reproj = QgsVectorLayer('Point?crs=' + crs_wgs.authid(), 'Pontos Reprojetados', 'memory') 
        pontos_reproj.startEditing()
        pontos_reproj.dataProvider().addAttributes(pontos_fotos.fields())
        pontos_reproj.updateFields()

        # Reprojetar os pontos
        for f in pontos_fotos.getFeatures():
            geom = f.geometry()
            geom.transform(transformador)
            reproj = QgsFeature()
            reproj.setGeometry(geom)
            reproj.setAttributes(f.attributes())
            pontos_reproj.addFeature(reproj)

        pontos_reproj.commitChanges()
        
        # Verificar se o caminho KML está preenchido
        if caminho_kml and caminho_kml.endswith('.kml'):
            # Configure as opções para gravar o arquivo
            options = QgsVectorFileWriter.SaveVectorOptions()
            options.fileEncoding = 'UTF-8'
            options.driverName = 'KML'
            options.crs = crs_wgs
            options.layerOptions = ['ALTITUDE_MODE=absolute'] 
            
            # Escrever a camada no arquivo KML
            grava = QgsVectorFileWriter.writeAsVectorFormat(pontos_reproj, caminho_kml, options)
            
            feedback.pushInfo(f"Arquivo KML exportado com sucesso para: {caminho_kml}")
        else:
            feedback.pushInfo("Caminho KML não especificado. Etapa de exportação ignorada.")
        
        if teste == True:
            QgsProject.instance().addMapLayer(pontos_reproj)
            
        # =============L I T C H I==========================================================

        # Definir novos campos xcoord e ycoord com coordenadas geográficas
        pontos_reproj.dataProvider().addAttributes([QgsField("xcoord", QVariant.Double), QgsField("ycoord", QVariant.Double)])
        pontos_reproj.updateFields()

        # Obtenha o índice dos novos campos
        idx_x = pontos_reproj.fields().indexFromName('xcoord')
        idx_y = pontos_reproj.fields().indexFromName('ycoord')

        # Inicie a edição da camada
        pontos_reproj.startEditing()

        for f in pontos_reproj.getFeatures():
            geom = f.geometry()
            if geom.isEmpty():
                continue

            point = geom.asPoint()
            x = point.x()
            y = point.y()

            f.setAttribute(idx_x, x)
            f.setAttribute(idx_y, y)

            pontos_reproj.updateFeature(f)

        pontos_reproj.commitChanges()

        # deletar campos desnecessários
        campos = ['latitude', 'longitude']
        
        pontos_reproj.startEditing()
        
        # Obtem os índices dos campos a serem deletados
        indices = [pontos_reproj.fields().indexFromName(campo) for campo in campos if campo in pontos_reproj.fields().names()]
        
        pontos_reproj.deleteAttributes(indices)
        
        pontos_reproj.commitChanges()
            
        # Mudar Sistema numérico - ponto no lugar de vírgula para separa a parte decimal - Campos Double para String
        def addCampo(camada, field_name, field_type):
            camada.dataProvider().addAttributes([QgsField(field_name, field_type)])
            camada.updateFields()
                
        pontos_reproj.startEditing()

        # Adicionar campos de texto em Pontos Reordenados
        addCampo(pontos_reproj, 'xcoord ', QVariant.String) # o espaço é para diferenciar; depois vamos deletar os campos antigos
        addCampo(pontos_reproj, 'ycoord ', QVariant.String)
        addCampo(pontos_reproj, 'alturaVoo ', QVariant.String)

        for f in pontos_reproj.getFeatures():
            x1= str(f['xcoord']).replace(',', '.')
            x2 = str(f['ycoord']).replace(',', '.')
            x3 = str(f['alturaVoo']).replace(',', '.')

            # Formatar os valores como strings com ponto como separador decimal
            x1 = "{:.6f}".format(float(x1))
            x2 = "{:.6f}".format(float(x2))
            x3 = "{:.6f}".format(float(x3))

            # Atualizar os valores dos campos de texto
            f['xcoord '] = x1
            f['ycoord '] = x2
            f['alturaVoo '] = x3

            pontos_reproj.updateFeature(f)

        pontos_reproj.commitChanges()

        # Lista de campos Double a serem removidos de Pontos Reprojetados
        camposDel = ['xcoord', 'ycoord', 'alturaVoo'] # sem o espaço
        
        pontos_reproj.startEditing()
        pontos_reproj.dataProvider().deleteAttributes([pontos_reproj.fields().indexOf(campo) for campo in camposDel if pontos_reproj.fields().indexOf(campo) != -1])
        pontos_reproj.commitChanges()

        if teste == True:
            QgsProject.instance().addMapLayer(pontos_reproj)

        # Verificar se o caminho CSV está preenchido
        if caminho_csv and caminho_csv.endswith('.csv'):
            # Exportar para o Litch (CSV já preparado)
            # Criar o arquivo CSV
            with open(caminho_csv, mode='w', newline='') as csvfile:
                # Definir os cabeçalhos do arquivo CSV
                fieldnames = [
                        "latitude", "longitude", "altitude(m)",
                        "heading(deg)", "curvesize(m)", "rotationdir",
                        "gimbalmode", "gimbalpitchangle",
                        "actiontype1", "actionparam1", "altitudemode", "speed(m/s)",
                        "poi_latitude", "poi_longitude", "poi_altitude(m)", "poi_altitudemode",
                        "photo_timeinterval", "photo_distinterval"]
                
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()

                # Ler os dados da camada Pontos
                for f in pontos_reproj.getFeatures():
                    # Extrair os valores dos campos da camada
                    x_coord = f['xcoord '] 
                    y_coord = f['ycoord ' ]

                    # Criar um dicionário de dados para cada linha do CSV
                    data = {
                        "latitude": y_coord,
                        "longitude": x_coord,
                        "altitude(m)": H, # altura do objeto
                        "heading(deg)": 360,
                        "curvesize(m)": 0,
                        "rotationdir": 0,
                        "gimbalmode": 2,
                        "gimbalpitchangle": 0,
                        "actiontype1": 1,
                        "actionparam1": 0,
                        "altitudemode": 0,
                        "speed(m/s)": 0,
                        "poi_latitude": 0,
                        "poi_longitude": 0,
                        "poi_altitude(m)": 0,
                        "poi_altitudemode": 0,
                        "photo_timeinterval": -1,
                        "photo_distinterval": deltaH}

                    # Escrever a linha no CSV
                    writer.writerow(data)
        else:
            feedback.pushInfo("Caminho CSV não especificado. Etapa de exportação ignorada.")

        # Mensagem de Encerramento
        feedback.pushInfo("")
        feedback.pushInfo("Plano de Voo Vertical executado com sucesso.") 
        """    
        return {}
        
    def name(self):
        return 'PlanoVooV'.lower()

    def displayName(self):
        return self.tr('Pontos Fotos - Voo Vertical')

    def group(self):
        return self.tr(self.groupId())

    def groupId(self):
        return ''
        
    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return PlanoVoo_V()
    
    def icon(self):
        return QIcon(os.path.join(os.path.dirname(os.path.dirname(__file__)), 'images/PlanoVoo.png'))
    
    texto = "Este algoritmo calcula a 'Linha do Voo' e uma camada dos 'Pontos' para Fotos. \
            Gera ainda: a planilha CSV para importar no Litchi e o arquivo KML para Google Earth. \
            Se você usa um aplicativo para Voo que não seja o Litchi, pode usar os pontos gerados no QGIS."
    figura = 'images/PlanoVoo2.jpg'

    def shortHelpString(self):
        corpo = '''<div align="center">
                      <img src="'''+ os.path.join(os.path.dirname(os.path.dirname(__file__)), self.figura) +'''">
                      </div>
                      <div align="right">
                      <p align="right">
                      <b>'Autor: Prof Cazaroli     -     Leandro França'</b>
                      </p>'Geoone'</div>
                    </div>'''
        return self.tr(self.texto) + corpo
  